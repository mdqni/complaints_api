basePath: /
definitions:
  auth.RequestBody:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  categoriesCreate.Request:
    properties:
      answer:
        type: string
      description:
        type: string
      title:
        type: string
    required:
    - answer
    - description
    - title
    type: object
  create.Request:
    properties:
      barcode:
        type: integer
      category_id:
        type: string
      message:
        type: string
    required:
    - category_id
    - message
    type: object
  domain.Category:
    properties:
      answer:
        type: string
      description:
        description: Detailed description of the category
        type: string
      id:
        type: string
      title:
        type: string
    type: object
  domain.Complaint:
    properties:
      answer:
        type: string
      barcode:
        type: integer
      category:
        $ref: '#/definitions/domain.Category'
      created_at:
        type: string
      id:
        type: string
      message:
        type: string
      status:
        description: '"approved" or "rejected", default is "pending"'
        type: string
      updated_at:
        type: string
    type: object
  resolveComplaint.Request:
    properties:
      answer:
        type: string
      status:
        type: string
    required:
    - answer
    - status
    type: object
  response.Response:
    properties:
      data: {}
      message:
        type: string
      statusCode:
        type: integer
    required:
    - statusCode
    type: object
  update.Request:
    properties:
      data:
        $ref: '#/definitions/domain.Complaint'
    type: object
  updateCategory.Request:
    properties:
      answer:
        type: string
      description:
        type: string
      id:
        type: string
      title:
        type: string
    required:
    - answer
    - description
    - title
    type: object
host: complaints-api.yeunikey.dev
info:
  contact:
    email: quanaimadi@.gmail.com
    name: API Support
  description: This is a server for managing complaints and categories.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Complaint Server API
  version: "1.0"
paths:
  /categories:
    get:
      consumes:
      - application/json
      description: Возвращает список всех категорий жалоб, доступных в системе.
      produces:
      - application/json
      responses:
        "200":
          description: List of all categories
          schema:
            items:
              $ref: '#/definitions/domain.Category'
            type: array
        "500":
          description: Internal server error while fetching categories
          schema:
            $ref: '#/definitions/response.Response'
      tags:
      - Categories
    post:
      consumes:
      - application/json
      description: 'Создает новую категорию жалоб с необходимыми данными: название,
        описание и ответ.'
      parameters:
      - description: Данные категории
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/categoriesCreate.Request'
      produces:
      - application/json
      responses:
        "200":
          description: Категория успешно создана
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Ошибка валидации или декодирования данных
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/response.Response'
      tags:
      - Categories
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: Удаляет категорию жалоб по переданному идентификатору.
      parameters:
      - description: ID категории
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Категория успешно удалена
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Неверный запрос (не указан ID) или некорректный ID
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Категория не найдена
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/response.Response'
      tags:
      - Categories
    get:
      consumes:
      - application/json
      description: Возвращает категорию по уникальному идентификатору (ID).
      parameters:
      - description: Category ID (unique identifier of the category)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Category details
          schema:
            $ref: '#/definitions/domain.Category'
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error while fetching the category
          schema:
            $ref: '#/definitions/response.Response'
      tags:
      - Categories
    put:
      consumes:
      - application/json
      description: Обновляет информацию о категории жалоб. Требуется предоставить
        ID категории и новые данные (название, описание и ответ).
      parameters:
      - description: Данные категории
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/updateCategory.Request'
      produces:
      - application/json
      responses:
        "200":
          description: Категория успешно обновлена
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Ошибка валидации или декодирования данных
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/response.Response'
      tags:
      - Categories
  /categories/{id}/complaints:
    get:
      consumes:
      - application/json
      description: Retrieve all complaints that belong to a specific category based
        on its unique identifier (Category ID).
      parameters:
      - description: Category UUID (unique identifier of the category)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of complaints associated with the given category
          schema:
            items:
              $ref: '#/definitions/domain.Complaint'
            type: array
        "400":
          description: Invalid category ID format
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: No complaints found for the given category
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error while fetching complaints
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get complaints by category UUID
      tags:
      - Complaints
  /complaints:
    post:
      consumes:
      - application/json
      description: Create a new complaint for a specific user and category. Only one
        complaint can be submitted per hour for the same user.
      parameters:
      - description: Complaint details
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/create.Request'
      produces:
      - application/json
      responses:
        "200":
          description: Success response with complaint ID and answer
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request, bad input or validation error
          schema:
            $ref: '#/definitions/response.Response'
        "429":
          description: Limit of one complaint per hour exceeded
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create a new complaint
      tags:
      - Complaints
  /complaints/{id}:
    delete:
      description: Delete a complaint by its ID. If the complaint is not found, an
        error is returned.
      parameters:
      - description: Complaint ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Complaint successfully deleted
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request or complaint not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      tags:
      - Complaints
    get:
      consumes:
      - application/json
      description: Retrieve a complaint using its unique identifier. The ID must be
        an integer that corresponds to a valid complaint in the database.
      parameters:
      - description: Complaint ID (unique identifier of the complaint)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Complaint details
          schema:
            $ref: '#/definitions/domain.Complaint'
        "400":
          description: Invalid request, incorrect ID format
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Complaint with the given ID not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get a complaint by ID
      tags:
      - Complaints
    put:
      consumes:
      - application/json
      description: Updates an existing complaint based on the provided complaint ID
        and new data.
      parameters:
      - description: Complaint ID
        in: path
        name: id
        required: true
        type: string
      - description: Complaint resolution details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/update.Request'
      produces:
      - application/json
      responses:
        "200":
          description: Complaint updated successfully
          schema:
            $ref: '#/definitions/update.Request'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Complaint not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      tags:
      - Complaints
  /complaints/{id}/status:
    put:
      consumes:
      - application/json
      description: Update the status of a complaint ("approved" or "rejected") with
        an answer
      parameters:
      - description: Complaint ID
        in: path
        name: id
        required: true
        type: integer
      - description: Complaint resolution details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/resolveComplaint.Request'
      produces:
      - application/json
      responses:
        "200":
          description: Complaint status updated successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Complaint not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Resolve a complaint !!NOT ENABLE RIGHT NOW
      tags:
      - Complaints
  /complaints/by-token:
    get:
      consumes:
      - application/json
      description: Retrieves all complaints associated with a user based on the provided
        token.
      parameters:
      - description: User token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of complaints
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Token required
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Invalid token or failed to fetch profile
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to serialize complaints
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get user complaints by token
      tags:
      - Complaints
  /complaints/can-submit:
    get:
      consumes:
      - application/json
      description: Проверяет, может ли пользователь отправить новую жалобу (прошел
        ли час с последнего запроса)
      parameters:
      - description: Barcode пользователя
        in: query
        name: barcode
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: true/false
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: missing barcode
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Проверка возможности отправки жалобы
      tags:
      - Complaints
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates an admin user with their username and password, and
        generates a JWT token if the credentials are correct.
      parameters:
      - description: Admin credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/auth.RequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to generate token
          schema:
            $ref: '#/definitions/response.Response'
      tags:
      - Auth
schemes:
- https
swagger: "2.0"
