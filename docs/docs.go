// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "email": "quanaimadi@.gmail.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/categories": {
            "get": {
                "description": "Возвращает список всех категорий жалоб, доступных в системе.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Categories"
                ],
                "responses": {
                    "200": {
                        "description": "List of all categories",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Category"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error while fetching categories",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/categories/{id}": {
            "get": {
                "description": "Возвращает категорию по уникальному идентификатору (ID).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Categories"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID (unique identifier of the category)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category details",
                        "schema": {
                            "$ref": "#/definitions/domain.Category"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error while fetching the category",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "Удаляет категорию жалоб по переданному идентификатору.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Categories"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID категории",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Категория успешно удалена",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос (не указан ID) или некорректный ID",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Категория не найдена",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/category": {
            "post": {
                "description": "Создает новую категорию жалоб с необходимыми данными: название, описание и ответ.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Categories"
                ],
                "parameters": [
                    {
                        "description": "Данные категории",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/categoriesCreate.Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Категория успешно создана",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации или декодирования данных",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/category/{id}": {
            "put": {
                "description": "Обновляет информацию о категории жалоб. Требуется предоставить ID категории и новые данные (название, описание и ответ).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Categories"
                ],
                "parameters": [
                    {
                        "description": "Данные категории",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/updateCategory.Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Категория успешно обновлена",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации или декодирования данных",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/complaints": {
            "post": {
                "description": "Create a new complaint for a specific user and category. Only one complaint can be submitted per hour for the same user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Complaints"
                ],
                "summary": "Create a new complaint",
                "parameters": [
                    {
                        "description": "Complaint details",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/create.Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response with complaint ID and answer",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request, bad input or validation error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "429": {
                        "description": "Limit of one complaint per hour exceeded",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/complaints/by-token": {
            "get": {
                "description": "Retrieves all complaints associated with a user based on the provided token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Complaints"
                ],
                "summary": "Get user complaints by token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of complaints",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Token required",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Invalid token or failed to fetch profile",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to serialize complaints",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/complaints/can-submit": {
            "get": {
                "description": "Проверяет, может ли пользователь отправить новую жалобу (прошел ли час с последнего запроса)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Complaints"
                ],
                "summary": "Проверка возможности отправки жалобы",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Barcode пользователя",
                        "name": "barcode",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "true/false",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "missing barcode",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/complaints/category/{id}": {
            "get": {
                "description": "Retrieve all complaints that belong to a specific category based on its unique identifier (Category ID).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Complaints"
                ],
                "summary": "Get complaints by category ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID (unique identifier of the category)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of complaints associated with the given category",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Complaint"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid category ID format",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "No complaints found for the given category",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error while fetching complaints",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/complaints/{id}": {
            "get": {
                "description": "Retrieve a complaint using its unique identifier. The ID must be an integer that corresponds to a valid complaint in the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Complaints"
                ],
                "summary": "Get a complaint by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Complaint ID (unique identifier of the complaint)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Complaint details",
                        "schema": {
                            "$ref": "#/definitions/domain.Complaint"
                        }
                    },
                    "400": {
                        "description": "Invalid request, incorrect ID format",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Complaint with the given ID not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing complaint based on the provided complaint ID and new data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Complaints"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Complaint ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Complaint resolution details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/update.Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Complaint updated successfully",
                        "schema": {
                            "$ref": "#/definitions/update.Request"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Complaint not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a complaint by its ID. If the complaint is not found, an error is returned.",
                "tags": [
                    "Complaints"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Complaint ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Complaint successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request or complaint not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/complaints/{id}/status": {
            "put": {
                "description": "Update the status of a complaint (\"approved\" or \"rejected\") with an answer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Complaints"
                ],
                "summary": "Resolve a complaint !!NOT ENABLE RIGHT NOW",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Complaint ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Complaint resolution details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/resolveComplaint.Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Complaint status updated successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Complaint not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticates an admin user with their username and password, and generates a JWT token if the credentials are correct.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "parameters": [
                    {
                        "description": "Admin credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.RequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to generate token",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.RequestBody": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "categoriesCreate.Request": {
            "type": "object",
            "required": [
                "answer",
                "description",
                "title"
            ],
            "properties": {
                "answer": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "create.Request": {
            "type": "object",
            "required": [
                "category_id",
                "message"
            ],
            "properties": {
                "barcode": {
                    "type": "string"
                },
                "category_id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "domain.Category": {
            "type": "object",
            "properties": {
                "answer": {
                    "type": "string"
                },
                "description": {
                    "description": "Detailed description of the category",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "domain.Complaint": {
            "type": "object",
            "properties": {
                "answer": {
                    "type": "string"
                },
                "barcode": {
                    "type": "string"
                },
                "category": {
                    "$ref": "#/definitions/domain.Category"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "description": "\"approved\" or \"rejected\", default is \"pending\"",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "resolveComplaint.Request": {
            "type": "object",
            "required": [
                "answer",
                "status"
            ],
            "properties": {
                "answer": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.Response": {
            "type": "object",
            "required": [
                "statusCode"
            ],
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "update.Request": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/domain.Complaint"
                }
            }
        },
        "updateCategory.Request": {
            "type": "object",
            "required": [
                "answer",
                "description",
                "title"
            ],
            "properties": {
                "answer": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "complaints-api.yeunikey.dev",
	BasePath:         "/",
	Schemes:          []string{"https"},
	Title:            "Complaint Server API",
	Description:      "This is a server for managing complaints and categories.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
